# Load the necessary packages and dataset
library(datasets)
library(reshape2)

# Load the airquality dataset
data("airquality")

# Display the first few rows of the dataset to understand its structure
head(airquality)

# i. Compute the mean temperature without using the built-in function
mean_temp <- sum(airquality$Temp, na.rm = TRUE) / length(na.omit(airquality$Temp))
cat("Mean Temperature:", mean_temp, "\n")

# ii. Extract the first five rows from the airquality dataset
first_five_rows <- airquality[1:5, ]
print(first_five_rows)

# iii. Extract all columns from airquality except Temp and Wind
airquality_excl_temp_wind <- airquality[, !(names(airquality) %in% c("Temp", "Wind"))]
print(airquality_excl_temp_wind)

# iv. Find the coldest day during the period
coldest_day <- airquality[which.min(airquality$Temp), ]
cat("Coldest Day:\n")
print(coldest_day)

# Get the summary statistics of the airquality dataset
summary_stats <- summary(airquality)
print(summary_stats)

# Melt the airquality dataset to long format
airquality_melted <- melt(airquality, na.rm = TRUE)
print(head(airquality_melted))

# Melt the airquality dataset with Month and Day as ID variables
airquality_melted_id <- melt(airquality, id.vars = c("Month", "Day"), na.rm = TRUE)
print(head(airquality_melted_id))

# Cast the molten airquality dataset with respect to Month and Day
airquality_cast <- dcast(airquality_melted_id, Month + Day ~ variable, fun.aggregate = mean)
print(head(airquality_cast))

# Compute the average of Ozone, Solar.R, Wind, and Temp per month
airquality_monthly_avg <- dcast(airquality_melted_id, Month ~ variable, fun.aggregate = mean)
print(airquality_monthly_avg)
